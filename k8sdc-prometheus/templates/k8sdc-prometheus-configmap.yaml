apiVersion: v1
kind: ConfigMap
metadata:
  name: k8sdc-prometheus
  namespace: k8sdc-system
  #namespace: {{ .namespace }}
  labels:
    app: k8sdc-prometheus
    heritage: k8sdc
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s # By default, scrape targets every 15 seconds.
      evaluation_interval: 15s # By default, scrape targets every 15 seconds.
      # scrape_timeout is set to the global default (10s).

      # Attach these labels to any time series or alerts when communicating with
      # external systems (federation, remote storage, Alertmanager).
      external_labels:
          monitor: 'codelab-monitor'

    # Load and evaluate rules in this file every 'evaluation_interval' seconds.
    rule_files:
      # - "first.rules"
      # - "second.rules"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'

        # Override the global default and scrape targets from this job every 5 seconds.
        scrape_interval: 5s

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        target_groups:
          - targets: ['localhost:9090']

      - job_name: 'etcd'
        target_groups:
          - targets:
            - 192.168.1.210:2379
            - 192.168.1.211:2379
            - 192.168.1.212:2379
            - 192.168.1.213:2379
            - 192.168.1.214:2379
            - 192.168.1.215:2379
            - 192.168.1.216:2379
            - 192.168.1.217:2379

      - job_name: 'kubernetes_components'
        kubernetes_sd_configs:
        - api_servers:
          - 'https://kubernetes.default.svc'
          in_cluster: true
          # This configures Prometheus to identify itself when scraping
          # metrics from Kubernetes cluster components.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        # Prometheus provides meta labels for each monitoring targets. We use
        # these to select targets we want to monitor and to modify labels attached
        # to scraped metrics.
        relabel_configs:
        # Only scrape apiserver and kubelets.
        - source_labels: [__meta_kubernetes_role]
          action: keep
          regex: (?:apiserver|node)
        # Redefine the Prometheus job based on the monitored Kubernetes component.
        - source_labels: [__meta_kubernetes_role]
          target_label: job
          replacement: kubernetes_$1
        # Attach all node labels to the metrics scraped from the components running
        # on that node.
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes_services'
        kubernetes_sd_configs:
        - api_servers:
          - 'https://kubernetes.default.svc'
          in_cluster: true
        relabel_configs:
        - source_labels: [__meta_kubernetes_role, __meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: endpoint;true
        - source_labels: [__meta_kubernetes_service_name]
          target_label: job
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)